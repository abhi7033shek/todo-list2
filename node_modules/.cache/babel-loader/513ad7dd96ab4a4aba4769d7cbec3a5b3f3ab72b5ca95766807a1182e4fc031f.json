{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\as994\\\\OneDrive\\\\Desktop\\\\todo list 2\\\\todolist\\\\src\\\\Inbox.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Inbox(props) {\n  _s();\n  const [newTask, setNewTask] = useState(false);\n  const titleRef = useRef();\n  const calendarRef = useRef();\n  const newtaskHandler = () => {\n    setNewTask(true);\n  };\n  const addHandler = () => {\n    if (titleRef.current.value === \"\") {\n      window.alert(\"Task Can Not Be Empty\");\n    }\n    const newObj = {\n      number: props.list.length + 1,\n      title: titleRef.current.value,\n      date: new Date(calendarRef.current.value)\n    };\n    props.append(newObj);\n    setNewTask(false);\n  };\n  const cancelHandler = () => {\n    setNewTask(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"INBOX\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this), !newTask && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"new\",\n      onClick: newtaskHandler,\n      children: \"+Add New\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), newTask && /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"newtask-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: titleRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"new\",\n          onClick: addHandler,\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"new\",\n          onClick: cancelHandler,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          ref: calendarRef,\n          defaultValue: \"02-02-2023\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: props.list.map(list => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box\",\n          children: [list.title, \" (\", list.date.toLocaleString, \")\"]\n        }, list.number, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(Inbox, \"Q5jfdBNcYWC4tzxFzcQkNwQqMOQ=\");\n_c = Inbox;\nvar _c;\n$RefreshReg$(_c, \"Inbox\");","map":{"version":3,"names":["React","useRef","useState","Inbox","props","newTask","setNewTask","titleRef","calendarRef","newtaskHandler","addHandler","current","value","window","alert","newObj","number","list","length","title","date","Date","append","cancelHandler","map","toLocaleString"],"sources":["C:/Users/as994/OneDrive/Desktop/todo list 2/todolist/src/Inbox.js"],"sourcesContent":["import React, { useRef, useState } from 'react'\r\n\r\nexport default function Inbox(props) {\r\n    const [newTask,setNewTask] = useState(false)\r\n    const titleRef = useRef()\r\n    const calendarRef = useRef()\r\n    const newtaskHandler=()=>{\r\n        setNewTask(true)\r\n    }\r\n    const addHandler=()=>{\r\n        if(titleRef.current.value === \"\"){\r\n            window.alert(\"Task Can Not Be Empty\")\r\n        }\r\n        const newObj = {\r\n            number : props.list.length+1,\r\n            title : titleRef.current.value,\r\n            date : new Date(calendarRef.current.value)\r\n        }\r\n        props.append(newObj)\r\n        setNewTask(false)\r\n    }\r\n    const cancelHandler=()=>{\r\n        setNewTask(false)\r\n    }\r\n  return (\r\n    <div>\r\n        <h3>INBOX</h3>\r\n        {!newTask && (\r\n            <button className='new' onClick={newtaskHandler}>+Add New</button>\r\n        )}\r\n        {newTask && (\r\n            <form className='newtask-box'>\r\n                <input type='text' ref={titleRef}/>\r\n                <div className='button'>\r\n                    <button className='new' onClick={addHandler}>Add Task</button>\r\n                    <button className='new' onClick={cancelHandler}>Cancel</button>\r\n                    <input type=\"date\" ref={calendarRef} defaultValue=\"02-02-2023\"/>\r\n                </div>\r\n            </form>\r\n        )}\r\n        <div>\r\n            {props.list.map((list)=>{\r\n                return(\r\n                    <div className='box' key={list.number}>\r\n                        {list.title} ({list.date.toLocaleString})\r\n\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAA;AAE/C,eAAe,SAASC,KAAK,CAACC,KAAK,EAAE;EAAA;EACjC,MAAM,CAACC,OAAO,EAACC,UAAU,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EAC5C,MAAMK,QAAQ,GAAGN,MAAM,EAAE;EACzB,MAAMO,WAAW,GAAGP,MAAM,EAAE;EAC5B,MAAMQ,cAAc,GAAC,MAAI;IACrBH,UAAU,CAAC,IAAI,CAAC;EACpB,CAAC;EACD,MAAMI,UAAU,GAAC,MAAI;IACjB,IAAGH,QAAQ,CAACI,OAAO,CAACC,KAAK,KAAK,EAAE,EAAC;MAC7BC,MAAM,CAACC,KAAK,CAAC,uBAAuB,CAAC;IACzC;IACA,MAAMC,MAAM,GAAG;MACXC,MAAM,EAAGZ,KAAK,CAACa,IAAI,CAACC,MAAM,GAAC,CAAC;MAC5BC,KAAK,EAAGZ,QAAQ,CAACI,OAAO,CAACC,KAAK;MAC9BQ,IAAI,EAAG,IAAIC,IAAI,CAACb,WAAW,CAACG,OAAO,CAACC,KAAK;IAC7C,CAAC;IACDR,KAAK,CAACkB,MAAM,CAACP,MAAM,CAAC;IACpBT,UAAU,CAAC,KAAK,CAAC;EACrB,CAAC;EACD,MAAMiB,aAAa,GAAC,MAAI;IACpBjB,UAAU,CAAC,KAAK,CAAC;EACrB,CAAC;EACH,oBACE;IAAA,wBACI;MAAA,UAAI;IAAK;MAAA;MAAA;MAAA;IAAA,QAAK,EACb,CAACD,OAAO,iBACL;MAAQ,SAAS,EAAC,KAAK;MAAC,OAAO,EAAEI,cAAe;MAAA,UAAC;IAAQ;MAAA;MAAA;MAAA;IAAA,QAC5D,EACAJ,OAAO,iBACJ;MAAM,SAAS,EAAC,aAAa;MAAA,wBACzB;QAAO,IAAI,EAAC,MAAM;QAAC,GAAG,EAAEE;MAAS;QAAA;QAAA;QAAA;MAAA,QAAE,eACnC;QAAK,SAAS,EAAC,QAAQ;QAAA,wBACnB;UAAQ,SAAS,EAAC,KAAK;UAAC,OAAO,EAAEG,UAAW;UAAA,UAAC;QAAQ;UAAA;UAAA;UAAA;QAAA,QAAS,eAC9D;UAAQ,SAAS,EAAC,KAAK;UAAC,OAAO,EAAEa,aAAc;UAAA,UAAC;QAAM;UAAA;UAAA;UAAA;QAAA,QAAS,eAC/D;UAAO,IAAI,EAAC,MAAM;UAAC,GAAG,EAAEf,WAAY;UAAC,YAAY,EAAC;QAAY;UAAA;UAAA;UAAA;QAAA,QAAE;MAAA;QAAA;QAAA;QAAA;MAAA,QAC9D;IAAA;MAAA;MAAA;MAAA;IAAA,QAEb,eACD;MAAA,UACKJ,KAAK,CAACa,IAAI,CAACO,GAAG,CAAEP,IAAI,IAAG;QACpB,oBACI;UAAK,SAAS,EAAC,KAAK;UAAA,WACfA,IAAI,CAACE,KAAK,EAAC,IAAE,EAACF,IAAI,CAACG,IAAI,CAACK,cAAc,EAAC,GAE5C;QAAA,GAH0BR,IAAI,CAACD,MAAM;UAAA;UAAA;UAAA;QAAA,QAG/B;MAEd,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA,QACA;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEV;AAAC,GAlDuBb,KAAK;AAAA,KAALA,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}